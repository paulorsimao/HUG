
-- Stored Procedure para UPDATE na tabela seguradora
CREATE PROCEDURE sp_UpdateSeguradora (
    p_id_seguradora INT,
    p_nome VARCHAR(255),
    p_cnpj CHAR (14),
    p_razao_social VARCHAR(100),
	p_telefone VARCHAR(20),
	p_email VARCHAR(255)
)	
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE seguradora
    SET
		nome = p_nome,
		cnpj = p_cnpj,
		razao_social = p_razao_social,
		telefone = p_telefone,
		email = p_email
	
    WHERE id_seguradora = p_id_seguradora;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('seguradora', 'Atualização da seguradora com ID ' || p_id_seguradora::text, CURRENT_TIMESTAMP);
END;
$$;

--$$ = inicio e fim de uma instrução no postgres
--|| = Concatena
--::text = garante que o dado vai ser convertido para text, antes de ser concatenado como string




-- Stored Procedure para INSERT na tabela seguradora
CREATE PROCEDURE sp_Insertseguradora (
    p_id_seguradora INT,
    p_nome VARCHAR(255),
    p_cnpj CHAR (14),
    p_razao_social VARCHAR(100),
	p_telefone VARCHAR(20),
	p_email VARCHAR(255)
	)
	
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO seguradora (id_seguradora, nome, cnpj,razao_social,telefone,email)
    VALUES 
		(p_id_seguradora,
		p_nome,
		p_cnpj,
		p_razao_social,
		p_telefone,
		p_email);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('seguradora', 'Inserção de nova seguradora', CURRENT_TIMESTAMP);
END;
$$;



-- Stored Procedure para DELETE na tabela seguradora
CREATE PROCEDURE sp_Deleteseguradora (
    p_id_seguradora INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM seguradora
    WHERE id_seguradora = p_id_seguradora;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('seguradora', 'Exclusão de seguradora com ID '  || p_id_seguradora::text, CURRENT_TIMESTAMP);
END;
$$;


-- Trigger para registrar UPDATE e DELETE na tabela seguradora

CREATE OR REPLACE FUNCTION tr_seguradora_update_delete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('seguradora', 'Exclusão de imóvel', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('seguradora', 'Update de imóvel', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_seguradora_update
AFTER UPDATE ON seguradora
FOR EACH ROW
EXECUTE FUNCTION tr_seguradora_update_delete();

CREATE TRIGGER tr_seguradora_delete
AFTER DELETE ON seguradora
FOR EACH ROW
EXECUTE FUNCTION tr_seguradora_update_delete();







-- Stored Procedure para UPDATE na tabela Cliente
CREATE PROCEDURE sp_UpdateCliente (
    p_id_cliente INT,
    p_nome VARCHAR(100),
    p_cpf VARCHAR(14),
    p_email VARCHAR(100),
    p_telefone VARCHAR(20))
	
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Cliente
    SET nome = p_nome,
        cpf = p_cpf,
        email = p_email,
        telefone = p_telefone
    WHERE id_cliente = p_id_cliente;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Cliente', 'Atualização do cliente com ID ' || p_id_cliente::text, CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para INSERT na tabela Cliente
CREATE PROCEDURE sp_InsertCliente (
    p_nome VARCHAR(100),
    p_cpf VARCHAR(14),
    p_email VARCHAR(100),
    p_telefone VARCHAR(20))
	
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO Cliente (nome, cpf, email, telefone)
    VALUES (p_nome, p_cpf, p_email, p_telefone);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Cliente', 'Inserção de novo cliente',CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para DELETE na tabela Cliente
CREATE PROCEDURE sp_DeleteCliente (
    p_id_cliente INT)
	
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM Cliente
    WHERE id_cliente = p_id_cliente;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Cliente', 'Exclusão do cliente com ID '|| p_id_cliente::text, CURRENT_TIMESTAMP);
END;
$$;


-- Trigger para registrar UPDATE e DELETE na tabela Cliente
CREATE TRIGGER tr_ClienteUpdateDelete
ON Cliente
AFTER UPDATE, DELETE
AS
BEGIN
    IF EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Cliente', 'Atualização ou exclusão de cliente', GETDATE());
    END
END;



-- Trigger para registrar UPDATE e DELETE na tabela Cliente
CREATE OR REPLACE FUNCTION tr_ClienteUpdateDelete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Cliente', 'Exclusão de Cliente', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('Cliente', 'Update de Cliente', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_ClienteUpdate_update
AFTER UPDATE ON cliente
FOR EACH ROW
EXECUTE FUNCTION tr_ClienteUpdateDelete();

CREATE TRIGGER tr_ClienteUpdate_delete
AFTER DELETE ON seguradora
FOR EACH ROW
EXECUTE FUNCTION tr_ClienteUpdateDelete();



-- Stored Procedure para UPDATE na tabela Sinistro
CREATE PROCEDURE sp_UpdateSinistro (
    p_id_sinistro INT,
    p_id_seguradora INT,
    p_descricao VARCHAR(500),
    p_data DATE,
    p_valor NUMERIC(15, 2))
	
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Sinistro
    SET id_seguradora = p_id_seguradora,
        descricao = p_descricao,
        data = p_data,
        valor = p_valor
    WHERE id_sinistro = p_id_sinistro;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Sinistro', 'Atualização do sinistro com ID ' || p_id_seguradora::text, CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para INSERT na tabela Sinistro
CREATE PROCEDURE sp_InsertSinistro (
    p_id_seguradora INT,
    p_descricao VARCHAR(500),
    p_data DATE,
    p_valor NUMERIC(15, 2))
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO Sinistro (id_seguradora, descricao, data, valor)
    VALUES (p_id_seguradora, p_descricao, p_data, p_valor);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Sinistro', 'Inserção de novo sinistro', CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para DELETE na tabela Sinistro
CREATE PROCEDURE sp_DeleteSinistro (
    p_id_sinistro INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM Sinistro
    WHERE id_sinistro = p_id_sinistro;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Sinistro', 'Exclusão do sinistro com ID ' || p_id_sinistro::text, CURRENT_TIMESTAMP);
END;
$$;


-- Trigger para registrar UPDATE e DELETE na tabela Sinistro
CREATE OR REPLACE FUNCTION tr_SinistroUpdateDelete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Sinistro', 'Exclusão de sinistro', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('Sinistro', 'Update de sinistro', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER tr_SinistroUpdate_update
AFTER UPDATE ON sinistro
FOR EACH ROW
EXECUTE FUNCTION tr_SinistroUpdateDelete();

CREATE TRIGGER tr_SinistroUpdate_delete
AFTER DELETE ON sinistro
FOR EACH ROW
EXECUTE FUNCTION tr_SinistroUpdateDelete();




-- Stored Procedure para UPDATE na tabela Apolice
CREATE PROCEDURE sp_UpdateApolice(
    p_id_apolice INT,
    p_id_cliente INT,
    p_id_seguradora INT,
    p_data DATE,
    p_valor NUMERIC(15, 2))
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Apolice
    SET id_cliente = p_id_cliente,
        id_seguradora = p_id_seguradora,
        data = p_data,
        valor = p_valor
    WHERE id_apolice = p_id_apolice;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Apolice', 'Atualização da apólice com ID '|| p_id_apolice::text, CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para INSERT na tabela Apolice
CREATE PROCEDURE sp_InsertApolice (
    p_id_cliente INT,
    p_id_seguradora INT,
    p_data DATE,
    p_valor NUMERIC(15, 2))
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO Apolice (id_cliente, id_seguradora, data, valor)
    VALUES (p_id_cliente, p_id_seguradora, p_data, p_valor);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Apolice', 'Inserção de nova apólice', CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para DELETE na tabela Apolice
CREATE PROCEDURE sp_DeleteApolice (
    p_id_apolice INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM Apolice
    WHERE id_apolice = p_id_apolice;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Apolice', 'Exclusão da apólice com ID ' || p_id_apolice::text, CURRENT_TIMESTAMP);
END;
$$;


-- Trigger para registrar UPDATE e DELETE na tabela Apolice
CREATE OR REPLACE FUNCTION tr_ApoliceUpdateDelete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Apolice', 'Exclusão de apólice', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('Apolice', 'Update de apólice', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER tr_ApoliceUpdate_update
AFTER UPDATE ON apolice
FOR EACH ROW
EXECUTE FUNCTION tr_ApoliceUpdateDelete();

CREATE TRIGGER tr_ApoliceUpdate_delete
AFTER DELETE ON apolice
FOR EACH ROW
EXECUTE FUNCTION tr_ApoliceUpdateDelete();


-- Stored Procedure para UPDATE na tabela Vistoria
CREATE PROCEDURE sp_UpdateVistoria (
    p_id_vistoria INT,
    p_id_seguradora INT,
    p_data_vistoria DATE,
    p_descricao VARCHAR(500))
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Vistoria
    SET id_seguradora = p_id_seguradora,
        data_vistoria = p_data_vistoria,
        descricao = p_descricao
    WHERE id_vistoria = p_id_vistoria;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Vistoria', 'Atualização da vistoria com ID '|| p_id_vistoria::text, CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para INSERT na tabela Vistoria
CREATE PROCEDURE sp_InsertVistoria(
    p_id_seguradora INT,
    p_data_vistoria DATE,
    p_descricao VARCHAR(500))
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO vistoria (id_seguradora, data_vistoria, descricao)
    VALUES (p_id_seguradora, p_data_vistoria, p_descricao);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Vistoria', 'Inserção de nova vistoria', CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para DELETE na tabela Vistoria
CREATE PROCEDURE sp_DeleteVistoria(
    p_id_vistoria INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM vistoria
    WHERE id_vistoria = p_id_vistoria;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Vistoria', 'Exclusão da vistoria com ID '|| p_id_vistoria::text, CURRENT_TIMESTAMP);
END;
$$;

-- Trigger para registrar UPDATE e DELETE na tabela Vistoria
CREATE OR REPLACE FUNCTION tr_VistoriaUpdateDelete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Vistoria', 'Exclusão de vistoria', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('Vistoria', 'Update de vistoria', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER tr_VistoriaUpdate_update
AFTER UPDATE ON vistoria
FOR EACH ROW
EXECUTE FUNCTION tr_VistoriaUpdateDelete();

CREATE TRIGGER tr_VistoriaUpdate_delete
AFTER DELETE ON vistoria
FOR EACH ROW
EXECUTE FUNCTION tr_VistoriaUpdateDelete();


-- Stored Procedure para UPDATE na tabela Mobilia
CREATE PROCEDURE sp_UpdateMobilia (
    p_id_mobilia INT,
    p_id_seguradora INT,
    p_tipo_mobilia INT,
    p_descricao VARCHAR(500),
    p_valor NUMERIC(15, 2))
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Mobilia
    SET id_seguradora = p_id_seguradora,
        tipo_mobilia = p_tipo_mobilia,
        descricao = p_descricao,
        valor = p_valor
    WHERE id_mobilia = p_id_mobilia;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Mobilia', 'Atualização da mobília com ID '|| p_id_mobilia::text, CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para INSERT na tabela Mobilia
CREATE PROCEDURE sp_InsertMobilia(
    p_id_seguradora INT,
    p_tipo_mobilia INT,
    p_descricao VARCHAR(500),
    p_valor NUMERIC(15, 2))
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO Mobilia (id_seguradora, tipo_mobilia, descricao, valor)
    VALUES (p_id_seguradora, p_tipo_mobilia, p_descricao, p_valor);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Mobilia', 'Inserção de nova mobília', CURRENT_TIMESTAMP);
END;
$$


-- Stored Procedure para DELETE na tabela Mobilia
CREATE PROCEDURE sp_DeleteMobilia(
    p_id_mobilia INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM Mobilia
    WHERE id_mobilia = p_id_mobilia;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Mobilia', 'Exclusão da mobília com ID ' || p_id_mobilia::text, CURRENT_TIMESTAMP);
END;
$$


-- Trigger para registrar UPDATE e DELETE na tabela Mobilia
CREATE OR REPLACE FUNCTION tr_MobiliaUpdateDelete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Mobilia', 'Exclusão de mobília', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('Mobilia', 'Update de mobília', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER tr_MobiliaUpdate_update
AFTER UPDATE ON mobilia
FOR EACH ROW
EXECUTE FUNCTION tr_MobiliaUpdateDelete();

CREATE TRIGGER tr_MobiliaUpdate_delete
AFTER DELETE ON mobilia
FOR EACH ROW
EXECUTE FUNCTION tr_MobiliaUpdateDelete();


-- Stored Procedure para UPDATE na tabela Corretor
CREATE PROCEDURE sp_UpdateCorretor(
    p_id_corretor INT,
    p_nome VARCHAR(100),
    p_cpf VARCHAR(14),
    p_email VARCHAR(100),
    p_salario NUMERIC(15, 2),
    p_telefone VARCHAR(20))
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Corretor
    SET nome = p_nome,
        cpf = p_cpf,
        email = p_email,
        salario = p_salario,
        telefone = p_telefone
    WHERE id_corretor = p_id_corretor;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Corretor', 'Atualização do corretor com ID ' || p_id_corretor::text, CURRENT_TIMESTAMP);
END;
$$;


-- Stored Procedure para INSERT na tabela Corretor
CREATE PROCEDURE sp_InsertCorretor (
    p_nome VARCHAR(100),
    p_cpf VARCHAR(14),
    p_email VARCHAR(100),
    p_salario NUMERIC(15, 2),
    p_telefone VARCHAR(20))
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO Corretor (nome, cpf, email, salario, telefone)
    VALUES (p_nome, p_cpf, p_email, p_salario, p_telefone);

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Corretor', 'Inserção de novo corretor', CURRENT_TIMESTAMP);
END;


-- Stored Procedure para DELETE na tabela Corretor
CREATE PROCEDURE sp_DeleteCorretor(
    p_id_corretor INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM Corretor
    WHERE id_corretor = p_id_corretor;

    INSERT INTO Historico (tabela, descricao, data)
    VALUES ('Corretor', 'Exclusão do corretor com ID ' || p_id_corretor::text, CURRENT_TIMESTAMP);
END;
$$;


-- Trigger para registrar UPDATE e DELETE na tabela Corretor
CREATE OR REPLACE FUNCTION tr_CorretorUpdateDelete()
  RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO Historico (tabela, descricao, data)
        VALUES ('Corretor', 'Exclusão de corretor', CURRENT_TIMESTAMP);
    ELSE
        IF TG_OP = 'UPDATE' THEN
            INSERT INTO Historico (tabela, descricao, data)
            VALUES ('Corretor', 'Update de corretor', CURRENT_TIMESTAMP);
        END IF;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER tr_CorretorUpdate_update
AFTER UPDATE ON corretor
FOR EACH ROW
EXECUTE FUNCTION tr_CorretorUpdateDelete();

CREATE TRIGGER tr_CorretorUpdate_delete
AFTER DELETE ON corretor
FOR EACH ROW
EXECUTE FUNCTION tr_CorretorUpdateDelete();
